import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class CronometroComLapPararVoltas extends JFrame {
    private JLabel label;
    private Timer timer;
    private int segundos;
    private int volta;
    private boolean pararDepoisDaVolta;
    private JPanel painelVoltas;
    private DefaultListModel<String> modeloLista;
    private String tempoVolta1;
    private String tempoVolta2;
    private String tempoTotal;

    public CronometroComLapPararVoltas() {
        // Configuração da interface e botão iniciar
        super("Cronômetro com Lap, Parar e Voltas");
        label = new JLabel("00:00:00");
        label.setFont(new Font("Impact", Font.PLAIN, 40));
        label.setHorizontalAlignment(JLabel.CENTER);
        add(label, BorderLayout.CENTER);

        JButton botaoIniciar = new JButton("Iniciar");
        botaoIniciar.setBackground(new Color(165, 250, 182));
        botaoIniciar.setFont(new Font("Impact", Font.PLAIN, 30));

        // Funcionalidade após ativação do botão iniciar
        botaoIniciar.addActionListener(e -> iniciarCronometro());
        add(botaoIniciar, BorderLayout.NORTH);

        // Configuração do botão Parar
        JButton botaoParar = new JButton("Parar");
        botaoParar.setBackground(new Color(239, 149, 142));
        botaoParar.setFont(new Font("Impact", Font.PLAIN, 20));
        botaoParar.addActionListener(e -> pararCronometro());
        add(botaoParar, BorderLayout.WEST);

        // Configuração do botão Volta
        JButton botaoLap = new JButton("Volta");
        botaoLap.setBackground(new Color(255, 255, 173));
        botaoLap.setFont(new Font("Impact", Font.PLAIN, 20));
        botaoLap.addActionListener(e -> marcarVolta());
        add(botaoLap, BorderLayout.EAST);

        // Configuração do painel para mostrar as voltas e seu tempo
        modeloLista = new DefaultListModel<>();
        JList<String> lista = new JList<>(modeloLista);
        JScrollPane scrollPane = new JScrollPane(lista);
        scrollPane.setPreferredSize(new Dimension(50, 100));
        scrollPane.setBorder(BorderFactory.createTitledBorder("Voltas"));

        painelVoltas = new JPanel(new BorderLayout());
        painelVoltas.add(scrollPane, BorderLayout.CENTER);
        painelVoltas.setPreferredSize(new Dimension(50, 100));
        add(painelVoltas, BorderLayout.SOUTH);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 400);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void iniciarCronometro() {
        if (timer == null) {
            segundos = 0;
            volta = 1;
            pararDepoisDaVolta = false;
            timer = new Timer(1000, e -> atualizarCronometro());
            timer.start();
        }
    }

    private void atualizarCronometro() {
        segundos++;
        int horas = segundos / 3600;
        int minutos = (segundos % 3600) / 60;
        int segs = segundos % 60;
        label.setText(String.format("%02d:%02d:%02d", horas, minutos, segs));
        
        if (pararDepoisDaVolta && volta == 3) {
            timer.stop();
            timer = null;
            JOptionPane.showMessageDialog(this, "Fim do cronômetro");
            JOptionPane.showMessageDialog(this, "O Tempo Total da Corrida é: " + tempoTotal);
            salvarDadosNoBancoDeDados();
        }
    }

    private void pararCronometro() {
        if (timer != null) {
            timer.stop();
            timer = null;
        }
    }

    private void marcarVolta() {
        if (timer != null) {
            String tempoVolta = label.getText();
            modeloLista.addElement("Volta " + volta + ": " + tempoVolta);
            
            if (volta == 1) {
                tempoVolta1 = tempoVolta;
            } else if (volta == 2) {
                tempoVolta2 = tempoVolta;
                tempoTotal = tempoVolta2;
                pararDepoisDaVolta = true;
            }
            
            volta++;
        }
    }

    private void salvarDadosNoBancoDeDados() {
        String url = "jdbc:mysql://localhost:3306/cronometro_teste";
        String user = "root";
        String password = "senha";
        String query = "INSERT INTO voltas (volta1, volta2) VALUES (?, ?)";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement statement = conn.prepareStatement(query)) {

            statement.setString(1, tempoVolta1);
            statement.setString(2, tempoVolta2);
            statement.executeUpdate();
            JOptionPane.showMessageDialog(this, "Dados salvos no banco de dados com sucesso!");

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar dados no banco de dados: " + ex.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new CronometroComLapPararVoltas();
    }
}
